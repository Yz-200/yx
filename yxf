
<!DOCTYPE html>
<html>
<head>
    <title>元宵节快乐</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background: #000;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }
        #canvas {
            position: fixed;
            top: 0;
            left: 0;
        }
        .greeting {
            position: relative;
            color: #fff;
            text-align: center;
            z-index: 1;
            font-family: 'Microsoft YaHei', sans-serif;
            text-shadow: 0 0 10px rgba(255, 100, 100, 0.9);
        }
        h1 {
            font-size: 4em;
            animation: float 3s ease-in-out infinite;
            margin-bottom: 20px;
        }
        p {
            font-size: 1.5em;
            animation: fade 2s ease-in-out infinite;
        }
        @keyframes float {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        @keyframes fade {
            0%, 100% { opacity: 0.8; }
            50% { opacity: 1; }
        }
    </style>
</head>
<body>
    <div class="greeting">
        <h1>🏮 元宵节快乐 🏮</h1>
        <p>月圆花好人相聚，元宵佳节共欢娱。</p>
        <p>愿君幸福长如伴，快乐永驻不孤独。</p> 
        <p>祝你诸事圆满，元宵喜乐</p>
    </div>
    <canvas id="canvas"></canvas>

    <!-- 元宵节音乐 -->
    <audio id="backgroundMusic" loop autoplay>
        <source src="1.mp3" type="audio/mpeg">
        
    </audio>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const PARTICLE_COUNT = 120; // 爆炸粒子数量
        const GRAVITY = 0.1;       // 重力系数

        // 获取音乐元素
        const backgroundMusic = document.getElementById('backgroundMusic');

        // 确保音乐自动播放
        document.addEventListener('click', () => {
            if (backgroundMusic.paused) {
                backgroundMusic.play();
            }
        });

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        resizeCanvas();
        window.addEventListener('resize', resizeCanvas);

        class Firework {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.startX = this.x;
                this.y = canvas.height;
                this.targetY = canvas.height * 0.2 + Math.random() * canvas.height * 0.3;
                this.speed = 5 + Math.random() * 3;
                this.hue = Math.random() * 360;
                this.particles = [];
                this.trail = [];
                this.exploded = false;
                this.alpha = 1;
            }

            update() {
                if (!this.exploded) {
                    // 添加上升轨迹
                    this.trail.push({x: this.x, y: this.y, alpha: 1});
                    if (this.trail.length > 5) this.trail.shift();

                    // 随机摆动效果
                    this.x += Math.cos(Date.now() * 0.002) * 0.5;
                    this.y -= this.speed;
                    
                    if (this.y <= this.targetY) {
                        this.explode();
                    }
                }

                // 更新粒子
                this.particles.forEach((p, i) => {
                    p.update();
                    if (p.alpha <= 0) this.particles.splice(i, 1);
                });

                // 更新轨迹透明度
                this.trail.forEach(pos => pos.alpha -= 0.02);
            }

            explode() {
                this.exploded = true;
                for (let i = 0; i < PARTICLE_COUNT; i++) {
                    this.particles.push(new Particle(
                        this.x, this.y, 
                        this.hue, 
                        Math.random() * 8 + 4
                    ));
                }
            }

            draw() {
                if (!this.exploded) {
                    // 绘制上升轨迹
                    ctx.lineWidth = 2;
                    this.trail.forEach((pos, i) => {
                        ctx.beginPath();
                        ctx.moveTo(pos.x, pos.y);
                        ctx.lineTo(this.x, this.y);
                        ctx.strokeStyle = `hsla(${this.hue}, 100%, 50%, ${pos.alpha})`;
                        ctx.stroke();
                    });
                }

                // 绘制爆炸粒子（无尾迹）
                this.particles.forEach(p => p.draw());
            }
        }

        class Particle {
            constructor(x, y, hue, speed) {
                this.x = x;
                this.y = y;
                this.hue = hue;
                this.speed = speed;
                this.angle = Math.random() * Math.PI * 2;
                this.vx = Math.cos(this.angle) * this.speed;
                this.vy = Math.sin(this.angle) * this.speed;
                this.alpha = 1;
                this.size = Math.random() * 3 + 1;
                this.decay = Math.random() * 0.015 + 0.015;
            }

            update() {
                this.vy += GRAVITY;  // 重力影响
                this.x += this.vx;
                this.y += this.vy;
                this.vx *= 0.97;     // 空气阻力
                this.vy *= 0.97;
                this.alpha -= this.decay;
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fillStyle = `hsla(${this.hue}, 100%, 50%, ${this.alpha})`;
                ctx.fill();
            }
        }

        const fireworks = [];
        
        function animate() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // 控制烟花生成频率
            if (Math.random() < 0.03) {
                fireworks.push(new Firework());
            }

            fireworks.forEach((fw, i) => {
                fw.update();
                fw.draw();
                if (fw.particles.length === 0 && fw.exploded) {
                    fireworks.splice(i, 1);
                }
            });

            requestAnimationFrame(animate);
        }

        animate();
    </script>
</body>
</html>
